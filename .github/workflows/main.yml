name: main action

on:
  push:
    branches:
      - master

jobs:
  js_lint:
    name: js_lint
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run lint
        run: npm run lint
  js_test:
    name: js_test
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run js test
        run: npm run test
  deploy:
    name: deploy
    needs: [js_test, js_lint]
    runs-on: ubuntu-latest
    steps:
    - name: Get source code
      uses: actions/checkout@v3
    - name: Install dependencies
      run: npm ci
    - name: Deploy to Staging server
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        REMOTE_USER: ${{ secrets.REMOTE_USER }}
        TARGET: ${{ secrets.REMOTE_TARGET }}
        EXCLUDE: "/node_modules/"
#  sonar:
#    name: sonar
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#      - uses: sonarsource/sonarqube-scan-action@master
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#      =============================== OPTIONAL NEXT
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}




#  deploy:
#    needs: [js_test, js_lint]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Run command on remote server
#        uses: D3rHase/ssh-command-action@v0.2.2
#        with:
#          host: ${{secrets.SSH_HOST}}
#          user: ${{secrets.SSH_USER}}
#          private_key: ${{secrets.SSH_PRIVATE_KEY}}
#          command: |
#            cd ${{ secrets.PROJECT_FOLDER }};
#            git checkout master;
#            git pull;
##            docker-compose --file docker-compose.prod.yml down;
##            docker-compose --file docker-compose.prod.yml up -d;
##            docker system prune --all --force;